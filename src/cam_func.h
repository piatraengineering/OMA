/********************************************************************                Copyright (C) 1994, Photometrics, Ltd.********************************************************************//*    This file depends on definitions in the "master.h" file.    */#ifndef    _CAM_FUNC_H_#define    _CAM_FUNC_H_/********************************************************************                C O N S T A N T   D E F I N I T I O N S********************************************************************/#define MAX_CAMERAS   8     /* Maximum # of cameras we support */#define MAX_GAINS    17     /* Maximum # of gains in any system */#define MAX_SPEEDS    8     /* Maximum # of speeds in any system */enum { GAIN_NOT_AVAILABLE,GAIN_AVAILABLE };enum { MILLISECONDS_DISPLAY,SECONDS_DISPLAY,MINUTES_DISPLAY };/********************************************************************                    T Y P E   D E F I N I T I O N S********************************************************************/typedef struct {    uns16   ns_per_pixel;   /* Nanoseconds per pixel conversion time */    int16   port;			/* Port used for readout */    uns8    bit_depth;      /* Number of bits in ADC */    uns8    gain[MAX_GAINS];/* Available gains are marked */} speed_table_type, *speed_table_ptr;typedef struct {    int16   total_cameras;  /* Number of camera drivers installed */    char    camera[MAX_CAMERAS][CAM_NAME_LEN];                            /* Names of the available cameras */    uns16   pvcam_ver;      /* PVCAM library version number */    uns16   ddi_ver;        /* Device driver interface version number */    int16   hcam;           /* PVCAM camera handle for the open camera */    int16   menu_cam;       /* Item # for the open camera on the                               Camera/Open menu (the one to gray out) */    uns16   dd_ver;         /* Device driver version number */    uns8    speed_table_entries; /* Number of speeds in the speed table */    uns8    max_recommended_speed; /* Index of the fastest speed recommended */    speed_table_type spd[MAX_SPEEDS];/* Data about the speeds available */    char    ccd_name[CCD_NAME_LEN]; /* Name of the CCD installed */    uns16   s_max;          /* Maximum serial size for the CCD */    uns16   p_max;          /* Maximum parallel size for the CCD */    uns16   serial_num;     /* Camera serial number */    int16   mpp_capable;    /* Indicates MPP capability & selectability */    boolean frame_capable;  /* Frame transfer capability indicator */    boolean s_well_exists;  /* Summing well present indicator */    uns32   fwell_capacity; /* Full well capacity of pixels in electrons */    int16   cooling;        /* Cooling type indicator (Normal or Cryo) */    uns16   prescan;        /* Serial pre-pixels */    uns16   postscan;       /* Serial post-pixels */    uns16   pix_ser_size;   /* Serial pixel physical size */    uns16   pix_ser_dist;   /* Serial pixel physical center to center distance */    uns16   pre_mask;       /* Parallel pre-rows */    uns16   post_mask;      /* Parallel post-rows */    uns16   pix_par_size;   /* Parallel pixel physical size */    uns16   pix_par_dist;   /* Parallel pixel physical center to center distance */    int16   speed_now;      /* Current speed table index number [0..7] */    int16   gain_now;       /* The gain now selected */    uns16   data_min;       /* Current image data minimum */    uns16   data_max;       /* Current image data maximum */    uns16   display_min;    /* Current display data minimum */    uns16   display_max;    /* Current display data maximum */    boolean auto_contrast;  /* TRUE => display_X=data_X for new image */    uns16   exposure_cycles;/* Number of "focus" cycles to take */    struct {        uns16   s_offset;   /* Serial offset */        uns16   s_size;     /* Serial size */        uns16   s_bin;      /* Serial binning */        uns16   p_offset;   /* Parallel offset */        uns16   p_size;     /* Parallel size */        uns16   p_bin;      /* Parallel binning */    } region;               /* Where we want to collect data from the CCD */    uns32   exposure_time;  /* Time for the exposure (in milliseconds) */    uns16   exposure_units; /* Units for displaying the exposure time */    int16   exposure_mode;  /* Exposure mode to use */} camera_data_type, *camera_data_ptr;/*****************************************************************                F U N C T I O N   P R O T O T Y P E S*****************************************************************//* Functions in cam_func.c */boolean init_data_structures(camera_data_ptr data);boolean open_new_camera(camera_data_ptr data,uns16 new_cam);boolean setup_one_exposure(camera_data_ptr data,uns32_ptr stream_size);/* External functions used by cam_func.c */void warning_dialog(int16 error_code,char_const_ptr message);#endif