// =================================================================================//	SensiCamInterface.h	 © 7/2001, COOKE Corporation	 				// =================================================================================#define __SENSICAMINTERFACE__typedef UInt32				SensiCamRef;// the akas in the stub aren't recognized (C vs C++ issue)#ifndef DO_MACH_O	#define SensiCam_SetImageBounds SensiCam_SetImageBounds__FUlP4Rect 	#define SensiCam_GetImageBounds	SensiCam_GetImageBounds__FUlPRect  	#define SensiCam_SetTiming SensiCam_SetTiming__FUlPlUl	#define SensiCam_Close	 SensiCam_Close__FUl	#define SensiCam_GetMaxImageSize SensiCam_GetMaxImageSize__FUlPUlPUl	#define SensiCam_GetBoardSpec SensiCam_GetBoardSpec__FUlPlPl 	#define SensiCam_RunCOC	SensiCam_RunCOC__FUlUl 	#define SensiCam_GetTiming	SensiCam_GetTiming__FUlPlPUl  	#define SensiCam_ReadFrame	SensiCam_ReadFrame__FUlPcUlUc 	#define SensiCam_GetCamSpec	SensiCam_GetCamSpec__FUlPlPlPl 	#define SensiCam_GetBinning	SensiCam_GetBinning__FUlPUlPUl 	#define SensiCam_Open SensiCam_Open__FsUlPUl  	#define SensiCam_GetAsyncReadState	SensiCam_GetAsyncReadState__FUlPUl 	#define SensiCam_GetFrameState	SensiCam_GetFrameState__FUlPUl 	#define SensiCam_GetTemp	SensiCam_GetTemp__FUlPlPl   	#define SetDefaultParams	SetDefaultParams__FPSensiCam   	#define SensiCam_StopCOC	SensiCam_StopCOC__FUl   	#define SensiCam_GetMode	SensiCam_GetMode__FUlPUl   	#define SensiCam_GetTriggerMode	SensiCam_GetTriggerMode__FUlPUl   	#define SensiCam_GetImageSize	SensiCam_GetImageSize__FUlPUlPUl  	#define SensiCam_SetMode	SensiCam_SetMode__FUlPUl   	#define SensiCam_SetTriggerMode	SensiCam_SetTriggerMode__FUlPUl   	#define SensiCam_SetBinning	SensiCam_SetBinning__FUlPUlPUl   #else	#define SensiCam_SetImageBounds SensiCam_SetImageBounds__FUlP4Rect	#define SensiCam_GetImageBounds	SensiCam_GetImageBounds__FUlPRect	#define SensiCam_SetTiming SensiCam_SetTiming__FUlPlUl	#define SensiCam_Close	 SensiCam_Close__FUl		#define SensiCam_GetBoardSpec SensiCam_GetBoardSpec__FUlPlPl	#define SensiCam_RunCOC	SensiCam_RunCOC__FUlUl	#define SensiCam_GetTiming	SensiCam_GetTiming__FUlPlPUl	#define SensiCam_ReadFrame	SensiCam_ReadFrame__FUlPcUlUc	#define SensiCam_GetCamSpec	SensiCam_GetCamSpec__FUlPlPlPl	#define SensiCam_GetBinning	SensiCam_GetBinning__FUlPUlPUl	#define SensiCam_Open SensiCam_Open__FsUlPUl	#define SensiCam_GetAsyncReadState	SensiCam_GetAsyncReadState__FUlPUl	#define SensiCam_GetFrameState	SensiCam_GetFrameState__FUlPUl		#define SetDefaultParams	SetDefaultParams__FPSensiCam	#define SensiCam_StopCOC	SensiCam_StopCOC__FUl	#define SensiCam_GetMode	SensiCam_GetMode__FUlPUl	#define SensiCam_GetTriggerMode	SensiCam_GetTriggerMode__FUlPUl		#define SensiCam_SetMode	SensiCam_SetMode__FUlPUl	#define SensiCam_SetTriggerMode	SensiCam_SetTriggerMode__FUlPUl			#define SensiCam_GetImageSize	SensiCam_GetImageSize__FUlPUln1	#define SensiCam_GetMaxImageSize	SensiCam_GetMaxImageSize__FUlPUln1	#define SensiCam_GetTemp	SensiCam_GetTemp__FUlPln1	#define SensiCam_SetBinning	SensiCam_SetBinning__FUlPUln1#endif// Error codes additional to "SensiCamDriver.h"enum{	errSensiCamDriverNotInitialized			= -10100,	errSensiCantLoadFramework,	errSensiInvalidDevice,    errSensiCantOpenDevice,	errSensiDeviceInUse,	errSensiNoSuchDevice,	errSensiCamCOCRunning,	errSensiCamCOCNotRunning,	errCantDoThatInCurrentMode};// Frame status (returned by 'SensiCam_GetFrameState')enum{	status_ReadOutRunning					= 0x0001,	status_NoPictureInPCIBuffer			= 0x0002,	status_CameraBusy						= 0x0004,	status_CameraBufferFull				= 0x0010};// GeneralOSErr					SensiCam_Open (SInt16 board, UInt32 mode, SensiCamRef* theSensiCamRef);OSErr					SensiCam_Close (SensiCamRef theSensiCam);OSErr					SensiCam_GetCamSpec (SensiCamRef theSensiCam, SInt32 *camType, SInt32 *camID, SInt32 *ccdType);OSErr					SensiCam_GetBoardSpec (SensiCamRef theSensiCam, SInt32 *boardType, SInt32 *boardRev);// Spatial CharacteristicsOSErr					SensiCam_GetMaxImageSize (SensiCamRef theSensiCam, UInt32* width, UInt32* height);OSErr					SensiCam_SetImageBounds (SensiCamRef theSensiCam, Rect* bounds);OSErr					SensiCam_GetImageBounds (SensiCamRef theSensiCam, Rect* bounds);OSErr					SensiCam_SetBinning (SensiCamRef theSensiCam, UInt32 *hBin, UInt32 *vBin);OSErr					SensiCam_GetBinning (SensiCamRef theSensiCam, UInt32 *hBin, UInt32 *vBin);OSErr					SensiCam_GetImageSize (SensiCamRef theSensiCam, UInt32* width, UInt32* height);// Temporal CharacteristicsOSErr					SensiCam_SetTiming (SensiCamRef theSensiCam, SInt32 *timeTable, UInt32 count);OSErr					SensiCam_GetTiming (SensiCamRef theSensiCam, SInt32 *timeTable, UInt32*count);// TempOSErr					SensiCam_GetTemp (SensiCamRef theSensiCam, SInt32 *ccdTemp, SInt32 *eleTemp);// ModesOSErr					SensiCam_SetMode (SensiCamRef theSensiCam, UInt32 *mode);OSErr					SensiCam_GetMode (SensiCamRef theSensiCam, UInt32 *mode);// TriggerOSErr					SensiCam_SetTriggerMode (SensiCamRef theSensiCam, UInt32 *triggerMode);OSErr					SensiCam_GetTriggerMode (SensiCamRef theSensiCam, UInt32 *triggerMode);// Capture controlOSErr					SensiCam_RunCOC (SensiCamRef theSensiCam, UInt32 mode);OSErr					SensiCam_StopCOC (SensiCamRef theSensiCam);OSErr					SensiCam_GetFrameState (SensiCamRef theSensiCam, UInt32 *theStatus);OSErr					SensiCam_ReadFrame (SensiCamRef theSensiCam, Ptr buffer, UInt32 bufferSize, Boolean sync);OSErr					SensiCam_GetAsyncReadState (SensiCamRef theSensiCam, UInt32 *theStatus);